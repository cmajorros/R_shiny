})
shinyApp(ui = ui, server =server)
library(shiny)
ui <- fluidPage
(
titlePanel("This is demo app"),
sidebarLayout(
sidebarPanel(
textInput("txtInput", "Input the text to display"),
mainPanel(
paste("You are entering"),
textOutput("txtOutput")
)
)
)
server <- shinyServer(function(input, output){
output$txtOutput <- renderText({
paste(input$txtInput)
})
})
shinyApp(ui = ui, server =server)
library(shiny)
u <- fluidPage(
titlePanel("This is demo app"),
sidebarLayout(
sidebarPanel(
textInput("txtInput", "Input the text to display"),
mainPanel(
paste("You are entering"),
textOutput("txtOutput")
)
)
)
serv <- shinyServer(function(input, output){
output$txtOutput <- renderText({
paste(input$txtInput)
})
})
shinyApp(ui = u, server =serv)
library(shiny)
u <- fluidPage(
titlePanel("This is demo app"),
sidebarLayout(
sidebarPanel(
textInput("txtInput", "Input the text to display"),
mainPanel(
paste("You are entering"),
textOutput("txtOutput")
)
)
)
serv <- shinyServer(function(input, output){
output$txtOutput <- renderText({
paste(input$txtInput)
})
})
shinyApp(ui = u, server =serv)
library(shiny)
u <- fluidPage(
titlePanel("This is demo app"),
sidebarLayout(
sidebarPanel(
textInput("txtInput", "Input the text to display"),
mainPanel(
paste("You are entering"),
textOutput("txtOutput")
)
)
)
server <- shinyServer(function(input, output){
output$txtOutput <- renderText({
paste(input$txtInput)
})
})
shinyApp(ui = ui, server = server)
runApp("C:/Users/User/Documents/R-Programming_Project/R_Shiny/first_page")
runApp("C:/Users/User/Documents/R-Programming_Project/R_Shiny/first_page.R")
runApp('R-Programming_Project/R_Shiny/first_page.R')
runApp('R-Programming_Project/R_Shiny/first_page.R')
runApp('R-Programming_Project/R_Shiny/first_page.R')
runApp('R-Programming_Project/R_Shiny/first_page.R')
runApp('R-Programming_Project/R_Shiny/first_page.R')
runApp('R-Programming_Project/R_Shiny/first_page.R')
runApp('R-Programming_Project/R_Shiny/first_page.R')
shiny::runApp('R-Programming_Project/R_Shiny')
data <- read.csv("C:/Users/User/Documents/R-Programming_Project/R-Credit_Scoring/Dataset_New/loan-data/LoanData.csv")
head(data)
ui <- fluidPage(
titlePanel("This is demo app"),
sidebarLayout(
sidebarPanel(
textInput("txtInput", "Input the text to display"),
selectInput("selCountry","select country", choices = data$loan_status)
),
mainPanel(
paste("You are entering"),
textOutput("txtOutput"),
textOutput("txtCountry")
)
)
)
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
shiny::runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
Total <- count.fields(data)
name <- ""
for (i in 1: Total) {
if (is.numeric(data[i]) == TRUE){
name <- c(i)
}
return(i)
}
Total <- count.fields(data)
Total <- colSums(data)
Total <- colSums(data)
Total <- ncol(data)
Total
name <- ""
for (i in 1: Total) {
if (is.numeric(data[i]) == TRUE){
name <- c(i)
}
return(i)
}
if (is.numeric(data[1]) == TRUE){
name <- c(i)
}
i
if (is.numeric(data[2]) == TRUE){
name <- c(i)
}
is.numeric(data[2])
name <- c(i)
name
if (is.numeric(data[3]) == TRUE){
name <- c(i)
name
}
name
name
is.numeric(data[3])
if (is.numeric(data[4]) == TRUE){
name <- c(i)
name
}
is.numeric(data[4])
if (is.numeric(data[5]) == TRUE){
name <- c(i)
name
}
is.numeric(data[5])
if (is.numeric(data[6]) == TRUE){
name <- c(i)
name
}
Total <- ncol(data)
NumCol <- NULL
CharCol <- NULL
for (i in 1: Total) {
if (is.numeric(data[6]) == TRUE){
NumCol <- c(i)
}
else {
CharCol <- c(i)
}
}
CharCol
NumCol
CharCol
NumCol
Total <- ncol(data)
NumCol <- NULL
CharCol <- NULL
for (i in 1: Total) {
if (is.numeric(data[6]) == TRUE){
NumCol <- cbine(i)
}
else {
CharCol <- cbine(i)
}
}
CharCol
NumCol
Total <- ncol(data)
NumCol <- NULL
CharCol <- NULL
for (i in 1: Total) {
if (is.numeric(data[6]) == TRUE){
NumCol <- cbine(NumCol,i)
}
else {
CharCol <- cbine(CharCol,i)
}
}
CharCol
NumCol
Total <- ncol(data)
NumCol <- NULL
CharCol <- NULL
for (i in 1: Total) {
if (is.numeric(data[6]) == TRUE){
NumCol <- cbine(NumCol,i)
}
else {
CharCol <- cbine(CharCol,i)
}
return(CharCol)
return(NumCol)
}
CharCol
NumCol
Total <- ncol(data)
NumCol <- NULL
CharCol <- NULL
for (i in 1: Total) {
if (is.numeric(data[i]) == TRUE){
NumCol <- cbine(NumCol,i)
}
else {
CharCol <- cbine(CharCol,i)
}
return(CharCol)
return(NumCol)
}
CharCol
NumCol
Total <- ncol(data)
NumCol <- NULL
CharCol <- NULL
for (i in 1: Total) {
if (is.numeric(data[i]) == TRUE){
NumCol <- cbind(NumCol,i)
}
else {
CharCol <- cbind(CharCol,i)
}
return(CharCol)
return(NumCol)
}
CharCol
NumCol
runApp('R-Programming_Project/R_Shiny')
Total <- ncol(data)
NumCol <- NULL
CharCol <- NULL
for (i in 1: Total) {
if (is.numeric(data[i]) == TRUE){
NumCol <- cbind(NumCol,i)
}
else {
CharCol <- cbind(CharCol,i)
}
return(CharCol)
return(NumCol)
}
if (is.numeric(data[i]) == TRUE){
if (is.numeric(data[1]) == TRUE){
NumCol <- cbind(NumCol,i)
}
NumCol
NumCol <- NA
CharCol <- NA
if (is.numeric(data[1]) == TRUE){
NumCol <- cbind(NumCol,i)
NumCol
}
NumCol
NumCol
NumCol
NumCol
if (is.numeric(data[1]) == TRUE){
NumCol <- cbind(NumCol,1)
NumCol
}
NumCol
Total <- ncol(data)
NumCol <- NA
CharCol <- NA
for (i in 1: Total) {
if (is.numeric(data[i]) == TRUE){
NumCol <- cbind(NumCol,i)
NumCol
}
else {
CharCol <- cbind(CharCol,i)
}
return(CharCol)
return(NumCol)
}
CharCol
NumCol
CharCol
runApp('R-Programming_Project/R_Shiny')
Total <- ncol(data)
data <- read.csv("C:/Users/User/Documents/R-Programming_Project/R-Credit_Scoring/Dataset_New/loan-data/LoanData.csv")
Total <- ncol(data)
NumCol <- NA
CharCol <- NA
for (i in 1: Total) {
if (is.numeric(data[i]) == TRUE){
NumCol <- cbind(NumCol,i)
NumCol
}
else {
CharCol <- cbind(CharCol,i)
}
return(CharCol)
return(NumCol)
}
CharCol
NumCol
NumCol <- ""
CharCol <- ""
for (i in 1: Total) {
if (is.numeric(data[i]) == TRUE){
NumCol <- cbind(NumCol,i)
NumCol
}
else {
CharCol <- cbind(CharCol,i)
}
return(CharCol)
return(NumCol)
}
CharCol
NumCol <- cbind(NumCol,1)
if (is.numeric(data[1]) == TRUE){
NumCol <- cbind(NumCol,1)
NumCol
}
NumCol
NumCol <- NA
CharCol <- NA
if (is.numeric(data[1]) == TRUE){
NumCol <- cbind(NumCol,1)
NumCol
}
NumCol
else {
CharCol <- cbind(CharCol,i)
}
CharCol <- cbind(CharCol,1)
NumCol
is.numeric(data[1]) == TRUE
if (is.numeric(data[1]) == FALSE){
CharCol <- cbind(CharCol,1)
}
CharCol
NumCol
NumCol <- NA
CharCol <- NA
for (i in 1: Total) {
if (is.numeric(data[1]) == TRUE){
NumCol <- cbind(NumCol,1)
NumCol
}
if (is.numeric(data[1]) == FALSE){
CharCol <- cbind(CharCol,1)
}
return(CharCol)
return(NumCol)
}
CharCol
NumCol
NumCol <- NA
CharCol <- NA
if (is.numeric(data[1]) == FALSE){
CharCol <- cbind(CharCol,1)
}
CharCol
NumCol <- NULL
CharCol <- NULL
if (is.numeric(data[1]) == FALSE){
CharCol <- cbind(CharCol,1)
}
CharCol
NumCol
if (is.numeric(data[2]) == TRUE){
NumCol <- cbind(NumCol,1)
NumCol
}
if (is.numeric(data[2]) == FALSE){
CharCol <- cbind(CharCol,1)
}
CharCol
if (is.numeric(data[3]) == TRUE){
NumCol <- cbind(NumCol,3)
NumCol
}
if (is.numeric(data[3]) == FALSE){
CharCol <- cbind(CharCol,3)
}
CharCol
NumCol
Total <- ncol(data)
NumCol <- NULL
CharCol <- NULL
for (i in 1: Total) {
if (is.numeric(data[3]) == TRUE){
NumCol <- cbind(NumCol,3)
NumCol
}
if (is.numeric(data[3]) == FALSE){
CharCol <- cbind(CharCol,3)
}
return(CharCol)
return(NumCol)
}
CharCol
NumCol
Total <- ncol(data)
NumCol <- NULL
CharCol <- NULL
for (i in 1: Total) {
if (is.numeric(data[3]) == TRUE){
NumCol <- cbind(NumCol,3)
return(NumCol)
}
if (is.numeric(data[3]) == FALSE){
CharCol <- cbind(CharCol,3)
return(CharCol)
}
}
CharCol
NumCol
str(data)
shiny::runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
dataplot <- aggregate(data$education,nrow(data))
dataplot <- aggregate(data$education,count.fields(data))
dataplot <- aggregate(data.length ~ education,length)
dataplot <- aggregate(data.length ~ education,length)
dataplot <- aggregate(data.length ~ data$education,length)
dataplot <- aggregate(x ~ education,data = data, FUN= length)
dataplot <- aggregate(data ~ education,data = data, FUN= length)
dataplot <- aggregate(data ~ education, data = data, FUN= length)
x <-data
dataplot <- aggregate(x ~ education, data = x, FUN= length)
x <-data
dataplot <- aggregate(x ~ education, data = x, FUN= length)
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(dplyr)
count(data, educatiom)
count(data, education)
?barplot
shiny::runApp('R-Programming_Project/R_Shiny')
barplot(dataplot[2,], names.arg = dataplot[1,])
dataplot <-     count(data, education)
runApp('R-Programming_Project/R_Shiny')
dataplot
dataplot <-    class( count(data, education))
dataplot
barplot(class(dataplot[2,]))
dataplot <-     count(data, education)
dataplot
barplot(class(dataplot[2,]))
class(dataplot[2,])
dataplot <-     count(data, education)
dataplot
barplot(class(dataplot[1,]))
barplot(class(dataplot[2,]))
barplot(class(dataplot[2,-1]))
dataplot <-     as.matrix(count(data, education))
dataplot
barplot(dataplot[2,]))
barplot(dataplot[2,])
dataplot <-     as.data.frame(count(data, education))
dataplot
barplot(dataplot[2,])
barplot(dataplot$n)
runApp('R-Programming_Project/R_Shiny')
?barplot
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
runApp('R-Programming_Project/R_Shiny')
shiny::runApp('R/Shiny_Dashboard')
runApp('R/Shiny_Dashboard')
runApp('R/Shiny_Dashboard')
runApp('R/Shiny_Dashboard')
runApp('R/Shiny_Dashboard')
runApp('R/Shiny_Dashboard')
runApp('R/Shiny_Dashboard')
runApp('R/Shiny_Dashboard')
runApp('R/Shiny_Dashboard')
runApp('R/Shiny_Dashboard')
runApp('R/Shiny_Dashboard')
